package lk.syscolabs.candidatemanager.validator;

import lk.syscolabs.candidatemanager.model.*;
import lk.syscolabs.candidatemanager.service.ApplicationService;
import lk.syscolabs.candidatemanager.service.DepartmentStateService;
import lk.syscolabs.candidatemanager.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.stream.Collectors;

@Component
public class StateValidator extends Validator {

    private static final Set<String> stateNames = new HashSet<>(Arrays.asList(
            "pre-check-rejected", "selected","on-hold", "withdrawn", "no-show", "pre-checked", "hr-short-listed", "hr-rejected", "line-short-listed", "line-rejected", "phone-rejected", "offer-accepted", "offer-rejected", "interviewed", "interview-rejected", "blacklisted", "interview-scheduled"));
    @Autowired
    private UserService userService;
    @Autowired
    private ApplicationService applicationService;
    @Autowired
    private DepartmentStateValidator departmentStateValidator;
    @Autowired
    private DepartmentStateService departmentStateService;

    @Override
    public ValidationResult validate(Object o) {

        ValidationResult validationResult = new ValidationResult();
        State state = (State) o;

        String stateName = state.getStateName();
        String comment = state.getComment();
        byte isActive = state.getIsActive();
        Application applicationByApplicationId = state.getApplicationByApplicationId();
        User userByUserId = state.getUserByUserId();
        Collection<DepartmentState> departmentStates = state.getDepartmentStatesById();

        if (comment == null || comment.length() == 0) {
            validationResult.addError("comment", "comment cannot be empty.");
        }

        if (isActive != 1 && isActive != 0 && isActive !=2) {
            validationResult.addError("isActive", "isActive should be either 0 or 1.");
        }

        if (userByUserId == null) {
            validationResult.addError("userByUserId", "userByUserId cannot be empty.");
        } else if (userService.getOne(userByUserId.getId()) == null) {
            validationResult.addError("userByUserId", "userByUserId isnt available.");
        }





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































        if (applicationByApplicationId == null) {
            validationResult.addError("applicationByApplicationId", "applicationByApplicationId cannot be empty.");
        } else if (applicationService.getOne(applicationByApplicationId.getId()) == null) {
            validationResult.addError("applicationByApplicationId", "applicationByApplicationId isnt available.");
        }

        if (stateName == null || stateName.length() == 0) {
            validationResult.addError("stateName", "stateName cannot be empty.");
        } else if (!stateNames.contains(stateName)) {
            validationResult.addError("stateName", "invalid stateName.");
        } else if (applicationByApplicationId != null && stateName.equals("hr-short-listed")) {
            if (isEmptyList(departmentStates)) {
                validationResult.addError("departmentStatesById", "departmentStatesById cannot be empty.");
            } else {
                int i = 0;
                for (DepartmentState departmentState : departmentStates) {
                    ValidationResult tmp = departmentStateValidator.validate(departmentState);
                    if (tmp.hasError()) {
                        validationResult.addError("department[" + i + "]", tmp.getErrors().toString());
                    } else {
                        Position appliedPosition = applicationService.getOne(applicationByApplicationId.getId()).getPositionByPositionId();
                        if (!userService.hasShortListPrivilege(departmentState.getUserByAssignedTo().getId(), appliedPosition)) {
                            validationResult.addError("department[" + i + "]", "user isnt privileged.");
                        }
                    }
                    i++;
                }
            }

        } else if (stateName.equals("line-rejected") || stateName.equals("line-short-listed")) {
            List<Application> applications = departmentStateService.findAllByAssignedTo(userByUserId);
            if (applications.stream().filter(application -> application.getId() == applicationByApplicationId.getId()).collect(Collectors.toList()).isEmpty()) {
                validationResult.addError("userByUserId", "user isnt privileged.");
            }
        }

        return validationResult;
    }
}
